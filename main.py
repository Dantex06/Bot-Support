import os.path
import json
import keep_alive
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from config import TOKEN_API, send
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
import os
from aiogram.types import ParseMode
import texts
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

class Group(StatesGroup):
    waiting_for_group = State()

keyboard_user = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_admin = ReplyKeyboardMarkup(resize_keyboard=True)
button1 = KeyboardButton('‚úçÔ∏è–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
button2 = KeyboardButton('üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ')
button3 = KeyboardButton('‚ùå–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—â–µ–Ω–∏–µ')
keyboard_user.add(button1).add(button2).insert(button3)
keyboard_admin.add('‚öôÔ∏è–ö–æ–º–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞')

bot = Bot(token=TOKEN_API)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

is_stopped = True
photo_admin = 0
async def on_start_up(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ')


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    file_path = 'users.txt'
    user_id = str(message.from_user.id)
    if os.path.exists(file_path):
        with open('users_ban.txt', 'r') as f:
            ban_users = f.read().splitlines()
        with open('users.txt', 'r')as f:
            users1 = f.read().splitlines()
        with open('admins_id.txt', 'r') as f:
            admin = f.read().splitlines()
        if user_id in ban_users:
            await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')

        if user_id in admin:
            await message.answer(text=texts.meeting_admin, reply_markup=keyboard_admin, parse_mode="HTML")
        else:
            if user_id not in users1:
                with open(file_path, 'a') as f:
                    f.write(user_id + '\n')
                await Group.waiting_for_group.set()
                await message.reply("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
            if user_id in users1:
                await message.answer(text=texts.how_to_write, reply_markup=keyboard_user, parse_mode="HTML")

@dp.message_handler(state=Group.waiting_for_group)
async def process_group(message: types.Message, state: FSMContext):

    with open('groups.txt', 'r', encoding='utf-8') as f:
        groups = f.read().splitlines()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–∫–µ
    if message.text in groups:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        with open('personal.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        group = data['personal']
        id_user = str(message.from_user.id)
        ready_list = {}
        for dictionary in range(len(group)):
            ready_list.update(group[dictionary])
        if str(message.from_user.id) in ready_list:
                await message.answer('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã')
                await state.finish()
        else:
            new_data = {message.from_user.id: message.text}
            with open('personal.json', encoding='utf-8')as f:
                data = json.load(f)
                data['personal'].append(new_data)
                with open('personal.json', 'w', encoding='utf-8') as outfile:
                    json.dump(data, outfile, ensure_ascii=False, indent=2)
                await message.reply(f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É {message.text}!", reply_markup=keyboard_user)
                await state.finish()
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message_handler(commands=['ban'])
async def ban_command(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    if str(message.from_user.id) in admin:
        id = message.text[5:]
        file_block_path = 'users_ban.txt'
        with open(file_block_path, 'a') as f:
            f.write(id + '\n')
        await bot.send_message(chat_id=int(id), text='–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ')
        await message.reply(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}')


@dp.message_handler(commands=['unban'])
async def unban_command(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    if str(message.from_user.id) in admin:
        text = message.text[7:]
        f = open("users_ban.txt").readlines()
        user_id = ('\n'.join(f).split())
        f.pop(user_id.index(str(text)))
        with open("users_ban.txt", 'w') as F:
            F.writelines(f)
        await bot.send_message(chat_id=int(text), text='–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ')
        await message.reply(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {text}')


@dp.message_handler(commands=['post'])
async def post(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    text = message.text[6:]
    if str(message.from_user.id) in admin:
        file_path = 'users.txt'
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                users = f.read().splitlines()
            for user_id in users:
                await bot.send_message(user_id, text=text, parse_mode=ParseMode.HTML)
            await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ: {text} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º')
        else:
            await message.answer('–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –µ—â–µ –Ω–µ—Ç')
    else:
        pass

@dp.message_handler(commands=['send'])
async def send_cmd(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    if str(message.from_user.id) in admin:
        args = message.get_args().split()
        user_id = args[0]
        text = ' '.join(args[1:])
        with open('personal.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        group = data['personal']
        ready_list = {}
        for dictionary in range(len(group)):
            ready_list.update(group[dictionary])
        for key, value in ready_list.items():
            if value == user_id:  # —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
                # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(chat_id=key, text=''+text)
        await bot.send_message(chat_id=send, text=f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã')

@dp.message_handler(commands=['answer'])
async def answer_message(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    if str(message.from_user.id) in admin:
        global id, k
        text = message.text[8:]
        for i in range(14):
            if text[:i].isdigit():
                id = text[:i]
                k = i
        await bot.send_message(id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:' + text[k:])
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    if str(message.from_user.id) in admin:
        id = message.text[7:]
        file_block_path = 'admins_id.txt'
        with open(file_block_path, 'a') as f:
            f.write(id + '\n')
        await bot.send_message(chat_id=send, text=f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∞')

@dp.message_handler(content_types=ContentType.PHOTO)
async def photo_id(message: types.Message):
    with open('admins_id.txt', 'r') as f:
        admin = f.read().splitlines()
    if str(message.from_user.id) in admin:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = message.photo[-1]
        file_id = photo.file_id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        caption = int(message.caption)

        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç, –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await bot.send_message(chat_id=caption, text='–ê–¥–º–∏–Ω –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
        await bot.send_photo(chat_id=caption, photo=file_id)
    else:
        user_id = str(message.from_user.id)
        file_path = 'users_ban.txt'

        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                ban_users = f.read().splitlines()
            if user_id in ban_users:
                await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
            else:
                username = str(message.from_user.username)
                global is_stopped
                if not is_stopped:
                    await bot.send_photo(send, photo=message.photo[-1].file_id, caption=message.text)
                    await message.reply(text='–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
                    id = (f'ID: ' + f'<code>{str(message.from_user.id)}</code>')
                    username = 'Username: ' + str(message.from_user.username)
                    text = '–í–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é' + '\n' + id + '\n' + username + '\n\n' + f'–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>/answer {str(message.from_user.id)} —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è </code>' + '\n' + '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    await bot.send_message(send, text=text, parse_mode="HTML")
                else:
                    await message.reply(
                        '–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–∂–∞—Ç–∞—Ç—å –Ω–∞ <code>üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</code>, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!',
                        parse_mode="HTML")


@dp.message_handler()
async def echo_message(message: types.Message):
    id = 'ID: ' + f'<code>{str(message.from_user.id)}</code>'
    username = 'Username: ' + str(message.from_user.username)
    text = '–í–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ' + '\n' + id + '\n' + username + '\n\n' + 'Text: ' + str(
        message.text) + '\n' + f'–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>/answer {str(message.from_user.id)} —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è </code>' + '\n' + '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    global is_stopped
    if message.text == '‚úçÔ∏è–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        with open('users.txt', 'r')as f:
            userr = f.read().splitlines()
        if str(message.from_user.id) in userr:
            f = open("users.txt").readlines()
            user_id = ('\n'.join(f).split())
            f.pop(user_id.index(str(message.from_user.id)))
            with open("users.txt", 'w') as F:
                F.writelines(f)
            with open('personal.json', 'r', encoding='utf-8') as file:
                data = json.load(file)
                for item in data["personal"]:
                    if str(message.from_user.id) in item:
                        data["personal"].remove(item)
                        with open('personal.json', 'w', encoding='utf-8') as outfile:
                            json.dump(data, outfile, ensure_ascii=False, indent=2)
            await message.answer(text='–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É <code>/start</code>', parse_mode='HTML')
        else:
            await bot.send_message(chat_id=message.from_user.id, text='–í—ã —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É <code>/start</code>', parse_mode='HTML')

    elif message.text == '‚öôÔ∏è–ö–æ–º–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞':
        with open('admins_id.txt', 'r') as f:
            admin = f.read().splitlines()
        if str(message.from_user.id) in admin:
            await bot.send_message(chat_id=send, text=texts.help_command, parse_mode="HTML")

    elif message.text == 'üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ':
        user_id = str(message.from_user.id)
        with open('users_ban.txt', 'r') as f:
            ban_users = f.read().splitlines()
        if user_id in ban_users:
            await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
        else:
            is_stopped = False
            await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    elif message.text == '‚ùå–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—â–µ–Ω–∏–µ':
        user_id = str(message.from_user.id)
        with open('users_ban.txt', 'r') as f:
            ban_users = f.read().splitlines()
        if user_id in ban_users:
            await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
        else:
            is_stopped = True
            await message.answer(
                '–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</code> –∏ '
                '–Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É',
                parse_mode="HTML")

    else:
        user_id = str(message.from_user.id)
        file_path = 'users_ban.txt'

        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                ban_users = f.read().splitlines()
            if user_id in ban_users:
                await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
            else:
                if not is_stopped:
                    await bot.send_message(send, text=text, parse_mode='HTML')
                    await message.reply("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

                if is_stopped:
                    await message.reply(
                        '–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–∂–∞—Ç–∞—Ç—å –Ω–∞ <code>üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</code>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!',
                        parse_mode="HTML")

keep_alive.keep_alive()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_start_up)

